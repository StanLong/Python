# 栈

# 逆波兰表达式

# class ArrayStack:

# 将中缀表达式转换成List
def infixExpressionList(expression):
    arrayList = []
    i = 0
    strNum = ""
    while True:
        if i>= expression.__len__():
            break
        else:
            if not expression[i].isdigit():
                arrayList.append(expression[i])
                i = i + 1
            else:
                while True:
                    if i < expression.__len__() and expression[i].isdigit():
                        strNum = strNum + expression[i]
                        i = i + 1
                    else:
                        break
                arrayList.append(strNum)
                strNum = ""
    return arrayList

# 将中缀表达式转换成后缀表达式
def suffixExpression(arrayList):
    s1 = [] # 保存操作符
    s2 = [] # 保存中间结果
    i = 0 # 索引辅助遍历
    ch = "" # 遍历出来的字符

    while True:
        if i >= len(arrayList):
            break
        else:
            if arrayList[i].isdigit():
                s2.append(arrayList[i])
                i = i + 1
            elif len(s1) == 0 or arrayList[i] == "(":
                s1.append(arrayList[i])
                i = i + 1
            elif arrayList[i] == ")":
                while True:
                    if s1[-1] == "(":
                        break
                    else:
                        s2.append(s1.pop())
                s1.pop()
                i = i + 1
            else:
                while True:
                    if len(s1) != 0 and getValue(s1[-1]) >= getValue(arrayList[i]):
                        s2.append(s1.pop())
                    else:
                        break
                s1.append(arrarList[i])
                i = i + 1

    if len(s1) != 0:
        while True:
            if len(s1) == 0:
                break
            else:
                s2.append(s1.pop())
    return s2

# 计算后缀表达式
def calculate(s2):
    num1 = 0
    num2 = 0
    result = 0
    operator = ""
    lst = []
    for i in s2:
        if i.isdigit():
            lst.append(i)
        else:
            num1 = int(lst.pop())
            num2 = int(lst.pop())
            if i == "+":
                result = num1 + num2
            elif i == "-":
                result = num2 - num1
            elif i == "*":
                result = num1 * num2
            elif i == "/":
                result = num2 / num1
            else:
                raise Exception("错误的操作符")
            lst.append(result)
    return lst[-1]


# 定义操作符的优先级
def getValue(operator):
    if operator == "+":
        return 1
    elif operator == "-":
        return 1
    elif operator == "*":
        return 2
    elif operator == "/":
        return 2
    else:
        return 0


if __name__ == '__main__':
    expression="1+((2+3)*4)-5"
    arrarList = infixExpressionList(expression)
    s2 = suffixExpression(arrarList)
    print(s2)
    result = calculate(s2)
    print(result)